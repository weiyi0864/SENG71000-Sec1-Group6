const vehicleModel = require('../models/vehicle');

// Middleware to handle form-data parsing
const multer = require('multer');

// userController.js (or your user-related controller file)
const path = require('path');
const fs = require('fs');

// Set up Multer storage for images
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, path.join(__dirname, '../Vehicle_Images')); // Save files to the 'Images' folder
    },
    filename: (req, file, cb) => {
        const uniqueSuffix = `${Date.now()}-${Math.round(Math.random() * 1E9)}${path.extname(file.originalname)}`;
        cb(null, uniqueSuffix); // Set unique filename for uploaded images
    },
});

const upload = multer({ storage }).single('image');


exports.createVehicle = (req, res) => {
    upload(req, res, async (err) => {
        if (err) {
            console.error('Error uploading image:', err);
            res.status(500).json({ error: 'Error uploading image' });
            return;
        }

        // Access other form fields along with the uploaded image
        const { type,make,model,year,color,licensePlate,rentPerDay,status,storeId,} = req.body;
        const { filename } = req.file; // 'filename' contains the unique filename generated by multer

        try {
            
            // Save the vehicle details and image filename to the database
            const newVehicle = await vehicleModel.createVehicle({
                type,
                make,
                model,
                year,
                color,
                license_plate:licensePlate,
                rent_per_day:rentPerDay,
                status,
                store_id:storeId,
                vehicle_image_filename: filename, // Store the image filename in the database
            });

            res.status(201).json({ message: 'Vehicle created successfully', vehicle: newVehicle });
        } catch (error) {
            console.error('Error creating vehicle:', error);
            res.status(500).json({ error: 'Error creating vehicle' });
        }
    });
};

exports.getAllVehicles = (req, res) => {
    upload(req, res, async (err) => {
        if (err) {
            console.error('Error parsing form data:', err);
            res.status(500).json({ error: 'Error parsing form data' });
            return;
        }

        // Access other form fields along with the uploaded image
        const {store_id} = req.query;
        
        try {
            const vehicles = await vehicleModel.getAllVehicles(store_id);
            
            const vehiclesWithImageUrls = vehicles.map(vehicle => {
                const filename = vehicle.vehicle_image_filename;
                return {
                    ...vehicle,
                    imageUrl: `http://${req.headers.host}/vehicle_images/${filename}`
                };
            });
            res.status(200).json(vehiclesWithImageUrls);
        } catch (error) {
            res.status(500).json({ error: 'Error retrieving vehicles' });
        }

        
    });
};
