{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thomas\\\\Documents\\\\car_rental\\\\frontend\\\\car_rental\\\\src\\\\ViewStores.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport Grid from '@mui/material/Grid';\nimport NavBar from './Components/NavBar';\nimport StoreCard from './Components/StoreCard';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ViewStores() {\n  _s();\n  const [storesInfo, setStoresInfo] = useState([]);\n  const {\n    role,\n    id\n  } = useParams();\n  // Set a default role if 'role' is undefined\n  const resolvedRole = role || 'general';\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/stores/get_all_stores');\n        if (!response.ok) {\n          throw new Error('Network response was not ok.');\n        }\n        const data = await response.json();\n        // Transform the data structure as mentioned before\n        const transformedData = data.map(store => ({\n          role: resolvedRole,\n          store_id: store.store_id,\n          user_id: id,\n          name: store.store_name,\n          work_time: `From ${new Date(store.start_time).toLocaleTimeString([], {\n            hour: '2-digit',\n            minute: '2-digit'\n          })} to ${new Date(store.end_time).toLocaleTimeString([], {\n            hour: '2-digit',\n            minute: '2-digit'\n          })}`,\n          desc: store.store_description,\n          image: store.imageUrl,\n          imageLabel: 'Store Image'\n        }));\n        setStoresInfo(transformedData);\n      } catch (error) {\n        console.error('There was a problem fetching the data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 4,\n      sx: {\n        marginLeft: 1,\n        marginTop: 1,\n        display: 'flex',\n        alignItems: 'center'\n      },\n      children: storesInfo.map(store => /*#__PURE__*/_jsxDEV(StoreCard, {\n        store: store\n      }, store.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(ViewStores, \"/Zf1sdBs7rDcBigJDXTmFDmRTyY=\", false, function () {\n  return [useParams];\n});\n_c = ViewStores;\nexport default ViewStores;\nvar _c;\n$RefreshReg$(_c, \"ViewStores\");","map":{"version":3,"names":["React","useParams","Grid","NavBar","StoreCard","useState","useEffect","jsxDEV","_jsxDEV","ViewStores","_s","storesInfo","setStoresInfo","role","id","resolvedRole","fetchData","response","fetch","ok","Error","data","json","transformedData","map","store","store_id","user_id","name","store_name","work_time","Date","start_time","toLocaleTimeString","hour","minute","end_time","desc","store_description","image","imageUrl","imageLabel","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","sx","marginLeft","marginTop","display","alignItems","title","_c","$RefreshReg$"],"sources":["C:/Users/thomas/Documents/car_rental/frontend/car_rental/src/ViewStores.js"],"sourcesContent":["import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport Grid from '@mui/material/Grid';\r\nimport NavBar from './Components/NavBar';\r\nimport StoreCard from './Components/StoreCard';\r\nimport { useState, useEffect } from 'react';\r\n\r\n\r\nfunction ViewStores() {\r\n\r\n    const [storesInfo, setStoresInfo] = useState([]);\r\n\r\n    const { role, id } = useParams();\r\n    // Set a default role if 'role' is undefined\r\n    const resolvedRole = role || 'general';\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:3001/stores/get_all_stores');\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok.');\r\n                }\r\n\r\n                const data = await response.json();\r\n                // Transform the data structure as mentioned before\r\n                const transformedData = data.map(store => ({\r\n                    role:resolvedRole,\r\n                    store_id:store.store_id,\r\n                    user_id:id,\r\n                    name: store.store_name,\r\n                    work_time: `From ${new Date(store.start_time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} to ${new Date(store.end_time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`,\r\n                    desc: store.store_description,\r\n                    image: store.imageUrl,\r\n                    imageLabel: 'Store Image',\r\n                }));\r\n\r\n                setStoresInfo(transformedData);\r\n            } catch (error) {\r\n                console.error('There was a problem fetching the data:', error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <NavBar />\r\n            <Grid container spacing={4} sx={{ marginLeft: 1, marginTop: 1, display: 'flex', alignItems: 'center' }}>\r\n                {storesInfo.map((store) => (\r\n                    <StoreCard key={store.title} store={store} />\r\n                ))}\r\n            </Grid>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ViewStores;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}